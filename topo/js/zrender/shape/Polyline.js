define(["require","./Base","./util/smoothSpline","./util/smoothBezier","./util/dashedLineTo","./Polygon","../tool/util"],function(require){var Base=require("./Base"),smoothSpline=require("./util/smoothSpline"),smoothBezier=require("./util/smoothBezier"),dashedLineTo=require("./util/dashedLineTo"),Polyline=function(options){this.brushTypeOnly="stroke";this.textPosition="end";Base.call(this,options)};Polyline.prototype={type:"polyline",buildPath:function(ctx,style){var pointList=style.pointList;if(!(pointList.length<2)){var len=Math.min(style.pointList.length,Math.round(style.pointListLength||style.pointList.length));if(style.smooth&&"spline"!==style.smooth){style.controlPointList||this.updateControlPoints(style);var controlPointList=style.controlPointList;ctx.moveTo(pointList[0][0],pointList[0][1]);for(var cp1,cp2,p,i=0;len-1>i;i++){cp1=controlPointList[2*i];cp2=controlPointList[2*i+1];p=pointList[i+1];ctx.bezierCurveTo(cp1[0],cp1[1],cp2[0],cp2[1],p[0],p[1])}}else{if("spline"===style.smooth){pointList=smoothSpline(pointList);len=pointList.length}if(style.lineType&&"solid"!=style.lineType){if("dashed"==style.lineType||"dotted"==style.lineType){var dashLength=(style.lineWidth||1)*("dashed"==style.lineType?5:1);ctx.moveTo(pointList[0][0],pointList[0][1]);for(var i=1;len>i;i++)dashedLineTo(ctx,pointList[i-1][0],pointList[i-1][1],pointList[i][0],pointList[i][1],dashLength)}}else{ctx.moveTo(pointList[0][0],pointList[0][1]);for(var i=1;len>i;i++)ctx.lineTo(pointList[i][0],pointList[i][1])}}}},updateControlPoints:function(style){style.controlPointList=smoothBezier(style.pointList,style.smooth,!1,style.smoothConstraint)},getRect:function(style){return require("./Polygon").prototype.getRect(style)}};require("../tool/util").inherits(Polyline,Base);return Polyline});