define(["require","../../tool/vector"],function(require){var vector=require("../../tool/vector");return function(points,smooth,isLoop,constraint){var prevPoint,nextPoint,min,max,cps=[],v=[],v1=[],v2=[],hasConstraint=!!constraint;if(hasConstraint){min=[1/0,1/0];max=[-(1/0),-(1/0)];for(var i=0,len=points.length;len>i;i++){vector.min(min,min,points[i]);vector.max(max,max,points[i])}vector.min(min,min,constraint[0]);vector.max(max,max,constraint[1])}for(var i=0,len=points.length;len>i;i++){var prevPoint,nextPoint,point=points[i];if(isLoop){prevPoint=points[i?i-1:len-1];nextPoint=points[(i+1)%len]}else{if(0===i||i===len-1){cps.push(vector.clone(points[i]));continue}prevPoint=points[i-1];nextPoint=points[i+1]}vector.sub(v,nextPoint,prevPoint);vector.scale(v,v,smooth);var d0=vector.distance(point,prevPoint),d1=vector.distance(point,nextPoint),sum=d0+d1;if(0!==sum){d0/=sum;d1/=sum}vector.scale(v1,v,-d0);vector.scale(v2,v,d1);var cp0=vector.add([],point,v1),cp1=vector.add([],point,v2);if(hasConstraint){vector.max(cp0,cp0,min);vector.min(cp0,cp0,max);vector.max(cp1,cp1,min);vector.min(cp1,cp1,max)}cps.push(cp0);cps.push(cp1)}isLoop&&cps.push(vector.clone(cps.shift()));return cps}});