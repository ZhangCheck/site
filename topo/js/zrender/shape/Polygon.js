define(["require","./Base","./util/smoothSpline","./util/smoothBezier","./util/dashedLineTo","../tool/util"],function(require){var Base=require("./Base"),smoothSpline=require("./util/smoothSpline"),smoothBezier=require("./util/smoothBezier"),dashedLineTo=require("./util/dashedLineTo"),Polygon=function(options){Base.call(this,options)};Polygon.prototype={type:"polygon",buildPath:function(ctx,style){var pointList=style.pointList;if(!(pointList.length<2)){if(style.smooth&&"spline"!==style.smooth){var controlPoints=smoothBezier(pointList,style.smooth,!0,style.smoothConstraint);ctx.moveTo(pointList[0][0],pointList[0][1]);for(var cp1,cp2,p,len=pointList.length,i=0;len>i;i++){cp1=controlPoints[2*i];cp2=controlPoints[2*i+1];p=pointList[(i+1)%len];ctx.bezierCurveTo(cp1[0],cp1[1],cp2[0],cp2[1],p[0],p[1])}}else{"spline"===style.smooth&&(pointList=smoothSpline(pointList,!0));if(style.lineType&&"solid"!=style.lineType){if("dashed"==style.lineType||"dotted"==style.lineType){var dashLength=style._dashLength||(style.lineWidth||1)*("dashed"==style.lineType?5:1);style._dashLength=dashLength;ctx.moveTo(pointList[0][0],pointList[0][1]);for(var i=1,l=pointList.length;l>i;i++)dashedLineTo(ctx,pointList[i-1][0],pointList[i-1][1],pointList[i][0],pointList[i][1],dashLength);dashedLineTo(ctx,pointList[pointList.length-1][0],pointList[pointList.length-1][1],pointList[0][0],pointList[0][1],dashLength)}}else{ctx.moveTo(pointList[0][0],pointList[0][1]);for(var i=1,l=pointList.length;l>i;i++)ctx.lineTo(pointList[i][0],pointList[i][1]);ctx.lineTo(pointList[0][0],pointList[0][1])}}ctx.closePath()}},getRect:function(style){if(style.__rect)return style.__rect;for(var minX=Number.MAX_VALUE,maxX=Number.MIN_VALUE,minY=Number.MAX_VALUE,maxY=Number.MIN_VALUE,pointList=style.pointList,i=0,l=pointList.length;l>i;i++){pointList[i][0]<minX&&(minX=pointList[i][0]);pointList[i][0]>maxX&&(maxX=pointList[i][0]);pointList[i][1]<minY&&(minY=pointList[i][1]);pointList[i][1]>maxY&&(maxY=pointList[i][1])}var lineWidth;lineWidth="stroke"==style.brushType||"fill"==style.brushType?style.lineWidth||1:0;style.__rect={x:Math.round(minX-lineWidth/2),y:Math.round(minY-lineWidth/2),width:maxX-minX+lineWidth,height:maxY-minY+lineWidth};return style.__rect}};require("../tool/util").inherits(Polygon,Base);return Polygon});