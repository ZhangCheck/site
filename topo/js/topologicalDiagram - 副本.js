function computeCross(line,lineArray){var pointArray=new Array;lineArray.forEach(function(l){if(line.x*l.y-line.y*l.x!=0){var pointX=(l.y*line.z-l.z*line.y)/(line.x*l.y-line.y*l.x),pointY=(line.x*l.z-l.x*line.z)/(line.x*l.y-l.x*line.y),xMax=0===line.x?line.xMax:l.xMax,xMin=0===line.x?line.xMin:l.xMin,yMax=0===line.y?line.yMax:l.yMax,yMin=0===line.y?line.yMin:l.yMin;xMax>pointX&&pointX>xMin&&yMax>pointY&&pointY>yMin&&pointArray.push({x:pointX,y:pointY})}});return pointArray}function link(init,target,g,lineArray){var lastPointOffset,xMax=0,xMin=0,yMax=0,yMin=0,xDir=init.x<target.x?1:-1,yDir=init.y<target.y?1:-1;xMax=xDir>0?target.x:init.x;xMin=xDir>0?init.x:target.x;yMax=yDir>0?target.y:init.y;yMin=yDir>0?init.y:target.y;g.moveTo(init.x,init.y);init.x==target.x?computeCross({x:0,y:1,z:init.y,xMax:xMax,xMin:xMin,yMax:yMax,yMin:yMin},lineArray).sort(function(a,b){return a.x>b.x?xDir:-1*xDir}).forEach(function(point){if(!(point.x-3*xDir<xMin||point.x-3*xDir>xMax||point.x<lastPointOffset+3&&point.x>lastPointOffset-3)){g.lineTo(point.x-3*xDir,init.y);g.arc(point.x,init.y,4,xDir>0?Math.PI:0,xDir>0?0:Math.PI,0);g.moveTo(point.x+3*xDir,init.y);lastPointOffset=point.x}}):init.y==target.y&&computeCross({x:1,y:0,z:target.x,xMax:xMax,xMin:xMin,yMax:yMax,yMin:yMin},lineArray).sort(function(a,b){return a.y>b.y?yDir:-1*yDir}).forEach(function(point){if(!(point.y-3*yDir<yMin||point.y-3*yDir>yMax||point.y<lastPointOffset+3&&point.y>lastPointOffset-3)){g.lineTo(target.x,point.y-3*yDir);g.arc(target.x,point.y,4,0>yDir?Math.PI/2:3*Math.PI/2,0>yDir?3*Math.PI/2:Math.PI/2,1);g.moveTo(target.x,point.y+3*yDir);lastPointOffset=point.y}});g.lineTo(target.x,init.y)}function generateNodes(data,that,parentIndex){for(var retChildIndex=new Array,i=0;i<data.length;i++){var node=new topologic.TopologicalNode(data[i].name,data[i].icon,parentIndex);if(data[i].children&&data[i].children.length>0){node.nodeChildren=arguments.callee(data[i].children,that,node.index);node.image.cursor="pointer"}else node.image.cursor="move";node.ll=data[i].ll;node.toX=void 0===data[i].x?0:data[i].x;node.toY=void 0===data[i].y?0:data[i].y;node.nodeState="init";node.x=stage.canvas.width/2;node.y=stage.canvas.height/2;node.collapsed=void 0===data[i].collapse?!0:data[i].collapse;that.addChild(node);retChildIndex.push(node.index)}return retChildIndex}function selectLineColor(ll,timeStamp){100>ll?void 0!==timeStamp&&Math.round(timeStamp/1e3)%2==1?g.beginStroke("#aa0000"):g.beginStroke("#ff0000"):200>ll&&ll>=100?void 0!==timeStamp&&Math.round(timeStamp/600)%2==1?g.beginStroke("#0066ff"):g.beginStroke("#0000aa"):400>ll&&ll>=200?void 0!==timeStamp&&Math.round(timeStamp/350)%2==1?g.beginStroke("#ffcc22"):g.beginStroke("#dd6600"):ll>=400&&(void 0!==timeStamp&&Math.round(timeStamp/100)%2==1?g.beginStroke("#00ff00"):g.beginStroke("#009922"))}(topologic.TopologicalDiagram=function(data){this.initialize();this.shape=new cjs.Shape;generateNodes(data,this);this.drawLine=function(timeStamp){var nodes=topologic.TopologicalNode.pool,g=new cjs.Graphics;new Array;g.setStrokeStyle(2);for(var i=0;i<nodes.length;i++)if(nodes[i].nodeChildren){for(var parentPort,children=nodes[i].nodeChildren,Quadrant={left:[],right:[],top:[],bottom:[]},angle={A:-1,B:-1,C:-1,D:-1},j=0;j<nodes[i].ports.length;j++)if(nodes[i].ports[j].link>=0){parentPort=j;j>=1&&3>=j?Quadrant.top.push(j):j>=5&&7>=j?Quadrant.right.push(j):j>=9&&11>=j?Quadrant.bottom.push(j):j>=13&&15>=j&&Quadrant.left.push(j)}children.forEach(function(j){nodes[j].x+nodes[j].nodeWidth<nodes[i].x&&Quardrant.left.push(j);nodes[j].x>nodes[i].x+nodes[i].nodeWidth&&Quardrant.right.push(j);nodes[j].y+nodes[j].nodeHeight<nodes[i].y&&Quardrant.top.push(j);nodes[j].y>nodes[i].x+nodes[i].nodeHeight&&Quardrant.bottom.push(j)});Quadrant.left.sort(function(v1,v2){return nodes[v1].y>nodes[v2].y?1:-1});for(;Quadrant.left.length>3;)nodes[Quadrant.left[Quadrant.left.length-1]].y-nodes[i].y>nodes[i].y+nodes[i].nodeHeight-nodes[Quadrant.left[0]].y||Quadrant.left[Quadrant.left.length-1]==parentPort?angle.A<0?angle.A=Quadrant.left.splice(Quadrant.left.length-1,1):Quardrant.top.push(Quadrant.left.splice(Quadrant.left.length-1,1)):angle.D<0?angle.D=Quadrant.left.splice(0,1):Quardrant.bottom.push(Quadrant.left.splice(0,1));Quadrant.top.sort(function(v1,v2){return nodes[v1].x<nodes[v2].x?1:-1});for(;Quadrant.top.length>3;)Quadrant.top[Quadrant.top.length-1]==parentPort?angle.B<0?angle.B=Quadrant.left.splice(Quadrant.top.length-2,1):Quardrant.right.push(Quadrant.left.splice(Quadrant.top.length-2,1)):angle.B<0?angle.B=Quadrant.left.splice(Quadrant.top.length-1,1):Quardrant.right.push(Quadrant.left.splice(Quadrant.top.length-1,1));Quadrant.right.sort(function(v1,v2){return nodes[v1].y<nodes[v2].y?1:-1});for(;Quadrant.right.length>3;)Quadrant.right[Quadrant.right.length-1]==parentPort?angle.C<0?angle.C=Quadrant.right.splice(Quadrant.right.length-2,1):Quardrant.bottom.push(Quadrant.right.splice(Quadrant.right.length-2,1)):angle.C<0?angle.C=Quadrant.right.splice(Quadrant.right.length-1,1):Quardrant.bottom.push(Quadrant.right.splice(Quadrant.right.length-1,1));Quadrant.bottom.sort(function(v1,v2){return nodes[v1].x>nodes[v2].x?1:-1});for(key in Quadrant){var suffix,targetNode,minPort;"left"==key?suffix="11":"top"==key?suffix="00":"right"==key?suffix="01":"bottom"==key&&(suffix="10");for(var n=0;n<Quadrant[key].length;n++)Quadrant[key][n]===parentPort&&Quadrant[key].splice(n,1);if(1==Quadrant[key].length){if(-1==nodes[i].ports[parseInt(suffix+"10",2)].link){nodes[i].ports[parseInt(suffix+"10",2)].link=Quadrant[key][0];targetNode=nodes[Quadrant[key][0]];for(var m=0;m<targetNode.ports.length;m++){minPort||(minPort=m);var distance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y),oldistance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y);distance>oldistance&&(minPort=m)}}}else if(2==Quadrant[key].length){nodes[i].ports[parseInt(suffix+"01",2)].link=Quadrant[key][0];targetNode=nodes[Quadrant[key][0]];for(var m=0;m<targetNode.ports.length;m++){minPort||(minPort=m);var distance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y),oldistance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y);distance>oldistance&&(minPort=m)}nodes[i].ports[parseInt(suffix+"11",2)].link=Quadrant[key][1];targetNode=nodes[Quadrant[key][1]];for(var m=0;m<targetNode.ports.length;m++){minPort||(minPort=m);var distance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y),oldistance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y);distance>oldistance&&(minPort=m)}}else if(3==Quadrant[key].length){nodes[i].ports[parseInt(suffix+"01",2)].link=Quadrant[key][0];targetNode=nodes[Quadrant[key][0]];for(var m=0;m<targetNode.ports.length;m++){minPort||(minPort=m);var distance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y),oldistance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y);distance>oldistance&&(minPort=m)}nodes[i].ports[parseInt(suffix+"10",2)].link=Quadrant[key][1];targetNode=nodes[Quadrant[key][1]];for(var m=0;m<targetNode.ports.length;m++){minPort||(minPort=m);var distance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y),oldistance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y);distance>oldistance&&(minPort=m)}nodes[i].ports[parseInt(suffix+"11",2)].link=Quadrant[key][2];targetNode=nodes[Quadrant[key][2]];for(var m=0;m<targetNode.ports.length;m++){minPort||(minPort=m);var distance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[m].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[m].y),oldistance=(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)*(nodes[i].ports[parseInt(suffix+"10",2)].x-targetNode.ports[minPort].x)+(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y)*(nodes[i].ports[parseInt(suffix+"10",2)].y-targetNode.ports[minPort].y);distance>oldistance&&(minPort=m)}}}}this.children[0].graphics&&this.removeChildAt(0);this.shape=new cjs.Shape(g);this.addChildAt(this.shape,0)};this.drawLine()}).prototype=new cjs.Container;topologic.TopologicalDiagram.prototype.nominalBounds=new cjs.Rectangle(726.5,478.5,126,92.5);topologic.TopologicalDiagram.prototype.reloadData=function(data){this.removeAllChildren();topologic.TopologicalNode.pool=[];generateNodes(data,this);this.drawLine()};