define(["require","./quickSelect"],function(require){function Node(axis,data){this.left=null;this.right=null;this.axis=axis;this.data=data}var quickSelect=require("./quickSelect"),KDTree=function(points,dimension){if(points.length){dimension||(dimension=points[0].array.length);this.dimension=dimension;this.root=this._buildTree(points,0,points.length-1,0);this._stack=[];this._nearstNList=[]}};KDTree.prototype._buildTree=function(points,left,right,axis){if(left>right)return null;var medianIndex=Math.floor((left+right)/2);medianIndex=quickSelect(points,left,right,medianIndex,function(a,b){return a.array[axis]-b.array[axis]});var median=points[medianIndex],node=new Node(axis,median);axis=(axis+1)%this.dimension;if(right>left){node.left=this._buildTree(points,left,medianIndex-1,axis);node.right=this._buildTree(points,medianIndex+1,right,axis)}return node};KDTree.prototype.nearest=function(target,squaredDistance){var curr=this.root,stack=this._stack,idx=0,minDist=1/0,nearestNode=null;if(curr.data!==target){minDist=squaredDistance(curr.data,target);nearestNode=curr}if(target.array[curr.axis]<curr.data.array[curr.axis]){curr.right&&(stack[idx++]=curr.right);curr.left&&(stack[idx++]=curr.left)}else{curr.left&&(stack[idx++]=curr.left);curr.right&&(stack[idx++]=curr.right)}for(;idx--;){curr=stack[idx];var currDist=target.array[curr.axis]-curr.data.array[curr.axis],isLeft=0>currDist,needsCheckOtherSide=!1;currDist*=currDist;if(minDist>currDist){currDist=squaredDistance(curr.data,target);if(minDist>currDist&&curr.data!==target){minDist=currDist;nearestNode=curr}needsCheckOtherSide=!0}if(isLeft){needsCheckOtherSide&&curr.right&&(stack[idx++]=curr.right);curr.left&&(stack[idx++]=curr.left)}else{needsCheckOtherSide&&curr.left&&(stack[idx++]=curr.left);curr.right&&(stack[idx++]=curr.right)}}return nearestNode.data};KDTree.prototype._addNearest=function(found,dist,node){for(var nearestNList=this._nearstNList,i=found-1;i>0&&!(dist>=nearestNList[i-1].dist);i--){nearestNList[i].dist=nearestNList[i-1].dist;nearestNList[i].node=nearestNList[i-1].node}nearestNList[i].dist=dist;nearestNList[i].node=node};KDTree.prototype.nearestN=function(target,N,squaredDistance,output){if(0>=N){output.length=0;return output}for(var curr=this.root,stack=this._stack,idx=0,nearestNList=this._nearstNList,i=0;N>i;i++){nearestNList[i]||(nearestNList[i]={});nearestNList[i].dist=0;nearestNList[i].node=null}var currDist=squaredDistance(curr.data,target),found=0;if(curr.data!==target){found++;this._addNearest(found,currDist,curr)}if(target.array[curr.axis]<curr.data.array[curr.axis]){curr.right&&(stack[idx++]=curr.right);curr.left&&(stack[idx++]=curr.left)}else{curr.left&&(stack[idx++]=curr.left);curr.right&&(stack[idx++]=curr.right)}for(;idx--;){curr=stack[idx];var currDist=target.array[curr.axis]-curr.data.array[curr.axis],isLeft=0>currDist,needsCheckOtherSide=!1;currDist*=currDist;if(N>found||currDist<nearestNList[found-1].dist){currDist=squaredDistance(curr.data,target);if((N>found||currDist<nearestNList[found-1].dist)&&curr.data!==target){N>found&&found++;this._addNearest(found,currDist,curr)}needsCheckOtherSide=!0}if(isLeft){needsCheckOtherSide&&curr.right&&(stack[idx++]=curr.right);curr.left&&(stack[idx++]=curr.left)}else{needsCheckOtherSide&&curr.left&&(stack[idx++]=curr.left);curr.right&&(stack[idx++]=curr.right)}}for(var i=0;found>i;i++)output[i]=nearestNList[i].node.data;output.length=found;return output};return KDTree});