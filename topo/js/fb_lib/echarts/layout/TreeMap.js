define(["require"],function(require){function TreeMapLayout(opts){({x:opts.x,y:opts.y,width:opts.width,height:opts.height});this.x=opts.x;this.y=opts.y;this.width=opts.width;this.height=opts.height}TreeMapLayout.prototype.run=function(areas){var out=[];this._squarify(areas,{x:this.x,y:this.y,width:this.width,height:this.height},out);return out};TreeMapLayout.prototype._squarify=function(areas,row,out){var layoutDirection="VERTICAL",width=row.width,height=row.height;if(row.width<row.height){layoutDirection="HORIZONTAL";width=row.height;height=row.width}for(var shapeArr=this._getShapeListInAbstractRow(areas,width,height),i=0;i<shapeArr.length;i++){shapeArr[i].x=0;shapeArr[i].y=0;for(var j=0;i>j;j++)shapeArr[i].y+=shapeArr[j].height}var nextRow={};if("VERTICAL"==layoutDirection){for(var k=0;k<shapeArr.length;k++)out.push({x:shapeArr[k].x+row.x,y:shapeArr[k].y+row.y,width:shapeArr[k].width,height:shapeArr[k].height});nextRow={x:shapeArr[0].width+row.x,y:row.y,width:row.width-shapeArr[0].width,height:row.height}}else{for(var l=0;l<shapeArr.length;l++)out.push({x:shapeArr[l].y+row.x,y:shapeArr[l].x+row.y,width:shapeArr[l].height,height:shapeArr[l].width});nextRow={x:row.x,y:row.y+shapeArr[0].width,width:row.width,height:row.height-shapeArr[0].width}}var nextAreaArr=areas.slice(shapeArr.length);0!==nextAreaArr.length&&this._squarify(nextAreaArr,nextRow,out)};TreeMapLayout.prototype._getShapeListInAbstractRow=function(areas,width,height){if(1===areas.length)return[{width:width,height:height}];for(var count=1;count<areas.length;count++){var shapeArr0=this._placeFixedNumberRectangles(areas.slice(0,count),width,height),shapeArr1=this._placeFixedNumberRectangles(areas.slice(0,count+1),width,height);if(this._isFirstBetter(shapeArr0,shapeArr1))return shapeArr0}};TreeMapLayout.prototype._placeFixedNumberRectangles=function(areaSubArr,width,height){for(var count=areaSubArr.length,shapeArr=[],sum=0,i=0;i<areaSubArr.length;i++)sum+=areaSubArr[i];for(var cellWidth=sum/height,j=0;count>j;j++){var cellHeight=height*areaSubArr[j]/sum;shapeArr.push({width:cellWidth,height:cellHeight})}return shapeArr};TreeMapLayout.prototype._isFirstBetter=function(shapeArr0,shapeArr1){var ratio0=shapeArr0[0].height/shapeArr0[0].width;ratio0=ratio0>1?1/ratio0:ratio0;var ratio1=shapeArr1[0].height/shapeArr1[0].width;ratio1=ratio1>1?1/ratio1:ratio1;return Math.abs(ratio0-1)<=Math.abs(ratio1-1)?!0:!1};return TreeMapLayout});